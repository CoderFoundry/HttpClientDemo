@page "/"
@inject ITMDBService tmdbService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="navStyle p-3" >
    <div class="container">
    <MovieTypeahead OnMovieSelected="OnMovieSelected" />
    </div>
</div>

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div id="movie-details" style="--background: url(@movie.BackdropPath)">
        <div id="movie-wrapper">
            <div class="container-xxl py-3">
                <div class="row">
                    <div class="col-12 col-md-4 col-xl-3 text-center text-md-start mb-3">
                        <img class="img-fluid" id="movie-poster" alt="movie poster" src="@movie.PosterPath" />
                    </div>
                    <div class="col-12 col-md-8 col-xl-9">
                        <h3 class="display-6 fw-bold mb-0">
                            @movie.Title
                        </h3>
                        <div class="lead mb-3">
                            @movie.Tagline
                        </div>
                        <div class="hstack gap-2">
                            @{
                                bool dateParsed = DateTime.TryParse(movie.ReleaseDate, out DateTime releaseDate);
                            }

                            @if (dateParsed)
                            {
                                <span>@releaseDate.ToString("MMMM dd, yyyy") | </span>
                            }
                            <span>
                                @{
                                    int? hours = movie.Runtime / 60;
                                    int? minutes = movie.Runtime % 60;
                                }
                                @hours hour(s) @minutes minutes
                            </span>
                        </div>
                        <div class="hstack gap-2 my-2">
                            @foreach (var genre in movie.Genres!)
                            {
                                <span class="badge text-bg-primary">@genre.Name</span>
                            }
                        </div>
                        <h5 class="lead fw-bold pt-3 mt-3">Overview</h5>
                        <p>@movie.Overview</p>
                        <div>
                            <span id="movie-rating">
                                User Score: @((movie.VoteAverage * 10).ToString("F2"))%
                            </span>
                        </div>
                        @if (!string.IsNullOrEmpty(movieTrailer?.Key))
                        {
                            <div id="btn-trailer" class="mt-3">
                                <button class="btn btn-outline-warning"
                                        data-bs-toggle="modal"
                                        data-bs-target="#movie-modal">
                                    <i class="bi bi-play"></i>Play Trailer
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    bool isLoading = true;

    private MovieDetails? movie;
    private Video? movieTrailer;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        // Initialize the movie details and trailer
        //get the movie details based on the selected movie ID
        movie = await tmdbService.GetMovieDetailsAsync(550);
        isLoading = false;
    }

    private async Task OnMovieSelected(int movieId)
    {
        isLoading = true;
        //get the movie details based on the selected movie ID
        movie = await tmdbService.GetMovieDetailsAsync(movieId);
        isLoading = false;

    }
}
